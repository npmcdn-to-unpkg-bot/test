
--------------------------------------------------------
[]        // 未定义变量.试图在Lambda内使用任何外部变量都是错误的.
[x, &y]   // x 按值捕获, y 按引用捕获.
[&]       // 用到的任何外部变量都隐式按引用捕获
[=]       // 用到的任何外部变量都隐式按值捕获
[&, x]    // x显式地按值捕获. 其它变量按引用捕获
[=, &z]   // z按引用捕获. 其它变量按值捕获
[this]    // 以值的方式捕获 this 指针
--------------------------------------------------------

(1)	  [ capture ] ( params ) mutable exception attribute -> ret { body }
(2)	  [ capture ] ( params ) -> ret { body }
(3)	  [ capture ] ( params ) { body }
(4)   [ capture ] { body }

(1) 是完整的 lambda 表达式形式，
	- mutable 修饰符说明 lambda 表达式体内的代码可以修改被捕获的变量，并且可以访问被捕获对象的 non-const 方法.
	- exception 说明 lambda 表达式是否抛出异常(noexcept)，以及抛出何种异常，类似于void f() throw(X, Y).
	- attribute 用来声明属性.
(2) const 类型的 lambda 表达式，该类型的表达式不能改捕获("capture")列表中的值.
(3) 省略了返回值类型的 lambda 表达式，但是该 lambda 表达式的返回类型可以按照下列规则推演出来：
		- 如果 lambda 代码块中包含了 return 语句，则该 lambda 表达式的返回类型由 return 语句的返回类型确定.
		- 如果没有 return 语句，则类似 void f(...) 函数.
(4) 省略了参数列表，类似于无参函数 f().


example:
// 可以直接计算出结果
int n = [] (int x, int y) { return x + y; }(5, 4);
